@using tcc_core.Models.ViewModels
@model LoginViewModel

@{
    ViewData["Title"] = "Login";
    var successMessage = TempData["SuccessMessage"] as string;
}

<h1 class="text-center">@ViewData["Title"]</h1>
<hr />


@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">
        @successMessage
    </div>
}

<div class="row justify-content-center">
    <div class="col-md-4">
        <form asp-action="Login">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label asp-for="Email" class="control-label">E-mail:</label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Senha" class="control-label">Senha:</label>
                <input asp-for="Senha" class="form-control" type="password" />
                <span asp-validation-for="Senha" class="text-danger"></span>
            </div>
            <br />
            <div class="form-group mb-3 text-center  d-flex justify-content-evenly">
                <input type="submit" value="Entrar" class="btn btn-dark" /> 
                <a asp-controller="Usuario" asp-action="Create" class="btn btn-success">Cadastre-se</a> @*  |
                <a asp-controller="Usuario" asp-action="ResetPassword" class="btn btn-secondary">Redefinir Senha</a> *@
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
